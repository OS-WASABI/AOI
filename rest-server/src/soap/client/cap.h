// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* cap.h
   Generated by wsdl2h 2.8.78 from https://raw.githubusercontent.com/talisein/Stormee/master/ipaws/IPAWS.wsdl and typemap.dat
   2019-02-06 02:45:13 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on cap.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2019, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://gov.fema.ipaws.services/IPAWS_CAPService/                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

ns1 = "http://gov.fema.ipaws.services/IPAWS_CAPService/"
ns2 = "http://gov.fema.ipaws.services/caprequest"
ns3 = "http://gov.fema.ipaws.services/capresponse"
ns22 = "urn:oasis:names:tc:emergency:cap:1.2"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://gov.fema.ipaws.services/caprequest"
//gsoap ns2   schema namespace:	http://gov.fema.ipaws.services/caprequest
//gsoap ns2   schema elementForm:	qualified
//gsoap ns2   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://gov.fema.ipaws.services/capresponse"
//gsoap ns3   schema namespace:	http://gov.fema.ipaws.services/capresponse
//gsoap ns3   schema elementForm:	qualified
//gsoap ns3   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns22	"urn:oasis:names:tc:emergency:cap:1.2"
//gsoap ns22  schema namespace:	urn:oasis:names:tc:emergency:cap:1.2
//gsoap ns22  schema elementForm:	qualified
//gsoap ns22  schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://gov.fema.ipaws.services/IPAWS_CAPService/"
//gsoap ns1   schema namespace:	http://gov.fema.ipaws.services/IPAWS_CAPService/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Primitive built-in type "xs:anyURI".
typedef std::string xsd__anyURI;

/// Primitive built-in type "xs:decimal".
typedef std::string xsd__decimal;

/// Primitive built-in type "xs:integer".
typedef std::string xsd__integer;

/// Primitive built-in type "xs:language".
typedef std::string xsd__language;


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class ns2__requestParameterList;

class ns2__parameterListItem;

class ns3__responseParameterList;

class ns3__subParameterListItem;

class _ns3__parameterListItem;

class _ns22__alert;

class _ns1__postCAPRequestTypeDef;

class _ns1__CAPServiceException;

class _ns1__postCAPResponseTypeDef;

class _ns1__messageResponseTypeDef;

class _ns1__CAPHeaderTypeDef;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://gov.fema.ipaws.services/caprequest                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://gov.fema.ipaws.services/capresponse                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://gov.fema.ipaws.services/IPAWS_CAPService/                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://gov.fema.ipaws.services/caprequest                                *
 *                                                                            *
\******************************************************************************/

/// @brief "http://gov.fema.ipaws.services/caprequest":requestParameterList is a complexType.
///
/// @note class ns2__requestParameterList operations:
/// - ns2__requestParameterList* soap_new_ns2__requestParameterList(soap*) allocate and default initialize
/// - ns2__requestParameterList* soap_new_ns2__requestParameterList(soap*, int num) allocate and default initialize an array
/// - ns2__requestParameterList* soap_new_req_ns2__requestParameterList(soap*, ...) allocate, set required members
/// - ns2__requestParameterList* soap_new_set_ns2__requestParameterList(soap*, ...) allocate, set all public members
/// - ns2__requestParameterList::soap_default(soap*) default initialize members
/// - int soap_read_ns2__requestParameterList(soap*, ns2__requestParameterList*) deserialize from a stream
/// - int soap_write_ns2__requestParameterList(soap*, ns2__requestParameterList*) serialize to a stream
/// - ns2__requestParameterList* ns2__requestParameterList::soap_dup(soap*) returns deep copy of ns2__requestParameterList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__requestParameterList::soap_del() deep deletes ns2__requestParameterList data members, use only after ns2__requestParameterList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__requestParameterList::soap_type() returns SOAP_TYPE_ns2__requestParameterList or derived type identifier
class ns2__requestParameterList
{ public:
/// Element "requestAPI" of type xs:string.
    std::string*                         requestAPI                     0;	///< Optional element.
/// Element "requestOperation" of type xs:string.
    std::string*                         requestOperation               0;	///< Optional element.
/// Vector of ns2__parameterListItem* of length 0..unbounded.
    std::vector<ns2__parameterListItem*> parameters                     0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief "http://gov.fema.ipaws.services/caprequest":parameterListItem is a complexType.
///
/// @note class ns2__parameterListItem operations:
/// - ns2__parameterListItem* soap_new_ns2__parameterListItem(soap*) allocate and default initialize
/// - ns2__parameterListItem* soap_new_ns2__parameterListItem(soap*, int num) allocate and default initialize an array
/// - ns2__parameterListItem* soap_new_req_ns2__parameterListItem(soap*, ...) allocate, set required members
/// - ns2__parameterListItem* soap_new_set_ns2__parameterListItem(soap*, ...) allocate, set all public members
/// - ns2__parameterListItem::soap_default(soap*) default initialize members
/// - int soap_read_ns2__parameterListItem(soap*, ns2__parameterListItem*) deserialize from a stream
/// - int soap_write_ns2__parameterListItem(soap*, ns2__parameterListItem*) serialize to a stream
/// - ns2__parameterListItem* ns2__parameterListItem::soap_dup(soap*) returns deep copy of ns2__parameterListItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns2__parameterListItem::soap_del() deep deletes ns2__parameterListItem data members, use only after ns2__parameterListItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns2__parameterListItem::soap_type() returns SOAP_TYPE_ns2__parameterListItem or derived type identifier
class ns2__parameterListItem
{ public:
/// Element "parameterName" of type xs:string.
    std::string*                         parameterName                  0;	///< Optional element.
/// Element "comparisonOp" of type xs:string.
    std::string*                         comparisonOp                   0;	///< Optional element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > parameterValue                 0;	///< Multiple elements.
/// Element "logicalOp" of type xs:string.
    std::string*                         logicalOp                      0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://gov.fema.ipaws.services/capresponse                               *
 *                                                                            *
\******************************************************************************/

/// @brief "http://gov.fema.ipaws.services/capresponse":responseParameterList is a complexType.
///
/// @note class ns3__responseParameterList operations:
/// - ns3__responseParameterList* soap_new_ns3__responseParameterList(soap*) allocate and default initialize
/// - ns3__responseParameterList* soap_new_ns3__responseParameterList(soap*, int num) allocate and default initialize an array
/// - ns3__responseParameterList* soap_new_req_ns3__responseParameterList(soap*, ...) allocate, set required members
/// - ns3__responseParameterList* soap_new_set_ns3__responseParameterList(soap*, ...) allocate, set all public members
/// - ns3__responseParameterList::soap_default(soap*) default initialize members
/// - int soap_read_ns3__responseParameterList(soap*, ns3__responseParameterList*) deserialize from a stream
/// - int soap_write_ns3__responseParameterList(soap*, ns3__responseParameterList*) serialize to a stream
/// - ns3__responseParameterList* ns3__responseParameterList::soap_dup(soap*) returns deep copy of ns3__responseParameterList, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__responseParameterList::soap_del() deep deletes ns3__responseParameterList data members, use only after ns3__responseParameterList::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__responseParameterList::soap_type() returns SOAP_TYPE_ns3__responseParameterList or derived type identifier
class ns3__responseParameterList
{ public:
/// Vector of _ns3__parameterListItem* element refs of length 0..unbounded.
    std::vector<_ns3__parameterListItem*> parameterListItem              0;	///< Multiple elements.
/// Element "ResponseOperation" of type xs:string.
    std::string*                         ResponseOperation              0;	///< Optional element.
/// Element "ResponseType" of type xs:string.
    std::string*                         ResponseType                   0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief "http://gov.fema.ipaws.services/capresponse":subParameterListItem is a complexType.
///
/// @note class ns3__subParameterListItem operations:
/// - ns3__subParameterListItem* soap_new_ns3__subParameterListItem(soap*) allocate and default initialize
/// - ns3__subParameterListItem* soap_new_ns3__subParameterListItem(soap*, int num) allocate and default initialize an array
/// - ns3__subParameterListItem* soap_new_req_ns3__subParameterListItem(soap*, ...) allocate, set required members
/// - ns3__subParameterListItem* soap_new_set_ns3__subParameterListItem(soap*, ...) allocate, set all public members
/// - ns3__subParameterListItem::soap_default(soap*) default initialize members
/// - int soap_read_ns3__subParameterListItem(soap*, ns3__subParameterListItem*) deserialize from a stream
/// - int soap_write_ns3__subParameterListItem(soap*, ns3__subParameterListItem*) serialize to a stream
/// - ns3__subParameterListItem* ns3__subParameterListItem::soap_dup(soap*) returns deep copy of ns3__subParameterListItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - ns3__subParameterListItem::soap_del() deep deletes ns3__subParameterListItem data members, use only after ns3__subParameterListItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int ns3__subParameterListItem::soap_type() returns SOAP_TYPE_ns3__subParameterListItem or derived type identifier
class ns3__subParameterListItem
{ public:
/// Element "subParameterName" of type xs:string.
    std::string*                         subParameterName               0;	///< Optional element.
/// Element "subParameterValue" of type xs:string.
    std::string*                         subParameterValue              0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://gov.fema.ipaws.services/capresponse":parameterListItem
/// @brief "http://gov.fema.ipaws.services/capresponse":parameterListItem is a complexType.
///
/// @note class _ns3__parameterListItem operations:
/// - _ns3__parameterListItem* soap_new__ns3__parameterListItem(soap*) allocate and default initialize
/// - _ns3__parameterListItem* soap_new__ns3__parameterListItem(soap*, int num) allocate and default initialize an array
/// - _ns3__parameterListItem* soap_new_req__ns3__parameterListItem(soap*, ...) allocate, set required members
/// - _ns3__parameterListItem* soap_new_set__ns3__parameterListItem(soap*, ...) allocate, set all public members
/// - _ns3__parameterListItem::soap_default(soap*) default initialize members
/// - int soap_read__ns3__parameterListItem(soap*, _ns3__parameterListItem*) deserialize from a stream
/// - int soap_write__ns3__parameterListItem(soap*, _ns3__parameterListItem*) serialize to a stream
/// - _ns3__parameterListItem* _ns3__parameterListItem::soap_dup(soap*) returns deep copy of _ns3__parameterListItem, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns3__parameterListItem::soap_del() deep deletes _ns3__parameterListItem data members, use only after _ns3__parameterListItem::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns3__parameterListItem::soap_type() returns SOAP_TYPE__ns3__parameterListItem or derived type identifier
class _ns3__parameterListItem
{ public:
/// Element "parameterName" of type xs:string.
    std::string*                         parameterName                  0;	///< Optional element.
/// Element "parameterValue" of type xs:string.
    std::string*                         parameterValue                 0;	///< Optional element.
/// Vector of ns3__subParameterListItem* of length 0..unbounded.
    std::vector<ns3__subParameterListItem*> subParaListItem                0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":alert
/// <PRE><BLOCKQUOTE>
///   CAP Alert Message (version 1.2)
/// </BLOCKQUOTE></PRE>
///
/// @brief "urn:oasis:names:tc:emergency:cap:1.2":alert is a complexType.
///
/// @note class _ns22__alert operations:
/// - _ns22__alert* soap_new__ns22__alert(soap*) allocate and default initialize
/// - _ns22__alert* soap_new__ns22__alert(soap*, int num) allocate and default initialize an array
/// - _ns22__alert* soap_new_req__ns22__alert(soap*, ...) allocate, set required members
/// - _ns22__alert* soap_new_set__ns22__alert(soap*, ...) allocate, set all public members
/// - _ns22__alert::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert(soap*, _ns22__alert*) deserialize from a stream
/// - int soap_write__ns22__alert(soap*, _ns22__alert*) serialize to a stream
/// - _ns22__alert* _ns22__alert::soap_dup(soap*) returns deep copy of _ns22__alert, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert::soap_del() deep deletes _ns22__alert data members, use only after _ns22__alert::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert::soap_type() returns SOAP_TYPE__ns22__alert or derived type identifier
class _ns22__alert
{ public:
/// Element "identifier" of type xs:string.
    std::string                          identifier                     1;	///< Required element.
/// Element "sender" of type xs:string.
    std::string                          sender                         1;	///< Required element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                         sent                           1;	///< Required element.
    enum _ns22__alert_status
    {
	_ns22__alert_status__Actual,	///< xs:string value="Actual"
	_ns22__alert_status__Exercise,	///< xs:string value="Exercise"
	_ns22__alert_status__System,	///< xs:string value="System"
	_ns22__alert_status__Test,	///< xs:string value="Test"
	_ns22__alert_status__Draft,	///< xs:string value="Draft"
    }
                                         status                         1;	///< Required element.
    enum _ns22__alert_msgType
    {
	_ns22__alert_msgType__Alert,	///< xs:string value="Alert"
	_ns22__alert_msgType__Update,	///< xs:string value="Update"
	_ns22__alert_msgType__Cancel,	///< xs:string value="Cancel"
	_ns22__alert_msgType__Ack,	///< xs:string value="Ack"
	_ns22__alert_msgType__Error,	///< xs:string value="Error"
    }
                                         msgType                        1;	///< Required element.
/// Element "source" of type xs:string.
    std::string*                         source                         0;	///< Optional element.
    enum _ns22__alert_scope
    {
	_ns22__alert_scope__Public,	///< xs:string value="Public"
	_ns22__alert_scope__Restricted,	///< xs:string value="Restricted"
	_ns22__alert_scope__Private,	///< xs:string value="Private"
    }
                                         scope                          1;	///< Required element.
/// Element "restriction" of type xs:string.
    std::string*                         restriction                    0;	///< Optional element.
/// Element "addresses" of type xs:string.
    std::string*                         addresses                      0;	///< Optional element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > code                           0;	///< Multiple elements.
/// Element "note" of type xs:string.
    std::string*                         note                           0;	///< Optional element.
/// Element "references" of type xs:string.
    std::string*                         references                     0;	///< Optional element.
/// Element "incidents" of type xs:string.
    std::string*                         incidents                      0;	///< Optional element.
/// Vector of info of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info operations:
/// - _ns22__alert_info* soap_new__ns22__alert_info(soap*) allocate and default initialize
/// - _ns22__alert_info* soap_new__ns22__alert_info(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info* soap_new_req__ns22__alert_info(soap*, ...) allocate, set required members
/// - _ns22__alert_info* soap_new_set__ns22__alert_info(soap*, ...) allocate, set all public members
/// - _ns22__alert_info::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info(soap*, _ns22__alert_info*) deserialize from a stream
/// - int soap_write__ns22__alert_info(soap*, _ns22__alert_info*) serialize to a stream
/// - _ns22__alert_info* _ns22__alert_info::soap_dup(soap*) returns deep copy of _ns22__alert_info, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info::soap_del() deep deletes _ns22__alert_info data members, use only after _ns22__alert_info::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info::soap_type() returns SOAP_TYPE__ns22__alert_info or derived type identifier
    class _ns22__alert_info
    { public:
/// Element "language" of type xs:language.
    xsd__language*                       language                       0 = "en-US";	///< Optional element with default value="en-US".
/// Vector of category of length 1..unbounded.
    std::vector<
    enum _ns22__alert_info_category
    {
	_ns22__alert_info_category__Geo,	///< xs:string value="Geo"
	_ns22__alert_info_category__Met,	///< xs:string value="Met"
	_ns22__alert_info_category__Safety,	///< xs:string value="Safety"
	_ns22__alert_info_category__Security,	///< xs:string value="Security"
	_ns22__alert_info_category__Rescue,	///< xs:string value="Rescue"
	_ns22__alert_info_category__Fire,	///< xs:string value="Fire"
	_ns22__alert_info_category__Health,	///< xs:string value="Health"
	_ns22__alert_info_category__Env,	///< xs:string value="Env"
	_ns22__alert_info_category__Transport,	///< xs:string value="Transport"
	_ns22__alert_info_category__Infra,	///< xs:string value="Infra"
	_ns22__alert_info_category__CBRNE,	///< xs:string value="CBRNE"
	_ns22__alert_info_category__Other,	///< xs:string value="Other"
    }
    >                                    category                       1;	///< Multiple elements.
/// Element "event" of type xs:string.
    std::string                          event                          1;	///< Required element.
/// Vector of responseType of length 0..unbounded.
    std::vector<
    enum _ns22__alert_info_responseType
    {
	_ns22__alert_info_responseType__Shelter,	///< xs:string value="Shelter"
	_ns22__alert_info_responseType__Evacuate,	///< xs:string value="Evacuate"
	_ns22__alert_info_responseType__Prepare,	///< xs:string value="Prepare"
	_ns22__alert_info_responseType__Execute,	///< xs:string value="Execute"
	_ns22__alert_info_responseType__Avoid,	///< xs:string value="Avoid"
	_ns22__alert_info_responseType__Monitor,	///< xs:string value="Monitor"
	_ns22__alert_info_responseType__Assess,	///< xs:string value="Assess"
	_ns22__alert_info_responseType__AllClear,	///< xs:string value="AllClear"
	_ns22__alert_info_responseType__None,	///< xs:string value="None"
    }
    >                                    responseType                   0;	///< Multiple elements.
    enum _ns22__alert_info_urgency
    {
	_ns22__alert_info_urgency__Immediate,	///< xs:string value="Immediate"
	_ns22__alert_info_urgency__Expected,	///< xs:string value="Expected"
	_ns22__alert_info_urgency__Future,	///< xs:string value="Future"
	_ns22__alert_info_urgency__Past,	///< xs:string value="Past"
	_ns22__alert_info_urgency__Unknown,	///< xs:string value="Unknown"
    }
                                         urgency                        1;	///< Required element.
    enum _ns22__alert_info_severity
    {
	_ns22__alert_info_severity__Extreme,	///< xs:string value="Extreme"
	_ns22__alert_info_severity__Severe,	///< xs:string value="Severe"
	_ns22__alert_info_severity__Moderate,	///< xs:string value="Moderate"
	_ns22__alert_info_severity__Minor,	///< xs:string value="Minor"
	_ns22__alert_info_severity__Unknown,	///< xs:string value="Unknown"
    }
                                         severity                       1;	///< Required element.
    enum _ns22__alert_info_certainty
    {
	_ns22__alert_info_certainty__Observed,	///< xs:string value="Observed"
	_ns22__alert_info_certainty__Likely,	///< xs:string value="Likely"
	_ns22__alert_info_certainty__Possible,	///< xs:string value="Possible"
	_ns22__alert_info_certainty__Unlikely,	///< xs:string value="Unlikely"
	_ns22__alert_info_certainty__Unknown,	///< xs:string value="Unknown"
    }
                                         certainty                      1;	///< Required element.
/// Element "audience" of type xs:string.
    std::string*                         audience                       0;	///< Optional element.
/// Vector of eventCode of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info_eventCode operations:
/// - _ns22__alert_info_eventCode* soap_new__ns22__alert_info_eventCode(soap*) allocate and default initialize
/// - _ns22__alert_info_eventCode* soap_new__ns22__alert_info_eventCode(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info_eventCode* soap_new_req__ns22__alert_info_eventCode(soap*, ...) allocate, set required members
/// - _ns22__alert_info_eventCode* soap_new_set__ns22__alert_info_eventCode(soap*, ...) allocate, set all public members
/// - _ns22__alert_info_eventCode::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info_eventCode(soap*, _ns22__alert_info_eventCode*) deserialize from a stream
/// - int soap_write__ns22__alert_info_eventCode(soap*, _ns22__alert_info_eventCode*) serialize to a stream
/// - _ns22__alert_info_eventCode* _ns22__alert_info_eventCode::soap_dup(soap*) returns deep copy of _ns22__alert_info_eventCode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info_eventCode::soap_del() deep deletes _ns22__alert_info_eventCode data members, use only after _ns22__alert_info_eventCode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info_eventCode::soap_type() returns SOAP_TYPE__ns22__alert_info_eventCode or derived type identifier
    class _ns22__alert_info_eventCode
    { public:
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   eventCode                      0;	///< Multiple elements.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *effective                      0;	///< Optional element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *onset                          0;	///< Optional element.
/// Content pattern is "\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d[-,+]\\d\\d:\\d\\d".
    time_t                                                             
                                        *expires                        0;	///< Optional element.
/// Element "senderName" of type xs:string.
    std::string*                         senderName                     0;	///< Optional element.
/// Element "headline" of type xs:string.
    std::string*                         headline                       0;	///< Optional element.
/// Element "description" of type xs:string.
    std::string*                         description                    0;	///< Optional element.
/// Element "instruction" of type xs:string.
    std::string*                         instruction                    0;	///< Optional element.
/// Element "web" of type xs:anyURI.
    xsd__anyURI*                         web                            0;	///< Optional element.
/// Element "contact" of type xs:string.
    std::string*                         contact                        0;	///< Optional element.
/// Vector of parameter of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info_parameter operations:
/// - _ns22__alert_info_parameter* soap_new__ns22__alert_info_parameter(soap*) allocate and default initialize
/// - _ns22__alert_info_parameter* soap_new__ns22__alert_info_parameter(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info_parameter* soap_new_req__ns22__alert_info_parameter(soap*, ...) allocate, set required members
/// - _ns22__alert_info_parameter* soap_new_set__ns22__alert_info_parameter(soap*, ...) allocate, set all public members
/// - _ns22__alert_info_parameter::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info_parameter(soap*, _ns22__alert_info_parameter*) deserialize from a stream
/// - int soap_write__ns22__alert_info_parameter(soap*, _ns22__alert_info_parameter*) serialize to a stream
/// - _ns22__alert_info_parameter* _ns22__alert_info_parameter::soap_dup(soap*) returns deep copy of _ns22__alert_info_parameter, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info_parameter::soap_del() deep deletes _ns22__alert_info_parameter data members, use only after _ns22__alert_info_parameter::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info_parameter::soap_type() returns SOAP_TYPE__ns22__alert_info_parameter or derived type identifier
    class _ns22__alert_info_parameter
    { public:
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   parameter                      0;	///< Multiple elements.
/// Vector of resource of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info_resource operations:
/// - _ns22__alert_info_resource* soap_new__ns22__alert_info_resource(soap*) allocate and default initialize
/// - _ns22__alert_info_resource* soap_new__ns22__alert_info_resource(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info_resource* soap_new_req__ns22__alert_info_resource(soap*, ...) allocate, set required members
/// - _ns22__alert_info_resource* soap_new_set__ns22__alert_info_resource(soap*, ...) allocate, set all public members
/// - _ns22__alert_info_resource::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info_resource(soap*, _ns22__alert_info_resource*) deserialize from a stream
/// - int soap_write__ns22__alert_info_resource(soap*, _ns22__alert_info_resource*) serialize to a stream
/// - _ns22__alert_info_resource* _ns22__alert_info_resource::soap_dup(soap*) returns deep copy of _ns22__alert_info_resource, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info_resource::soap_del() deep deletes _ns22__alert_info_resource data members, use only after _ns22__alert_info_resource::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info_resource::soap_type() returns SOAP_TYPE__ns22__alert_info_resource or derived type identifier
    class _ns22__alert_info_resource
    { public:
/// Element "resourceDesc" of type xs:string.
    std::string                          resourceDesc                   1;	///< Required element.
/// Element "mimeType" of type xs:string.
    std::string                          mimeType                       1;	///< Required element.
/// Element "size" of type xs:integer.
    xsd__integer*                        size                           0;	///< Optional element.
/// Element "uri" of type xs:anyURI.
    xsd__anyURI*                         uri                            0;	///< Optional element.
/// Element "derefUri" of type xs:string.
    std::string*                         derefUri                       0;	///< Optional element.
/// Element "digest" of type xs:string.
    std::string*                         digest                         0;	///< Optional element.
    }>                                   resource                       0;	///< Multiple elements.
/// Vector of area of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info_area operations:
/// - _ns22__alert_info_area* soap_new__ns22__alert_info_area(soap*) allocate and default initialize
/// - _ns22__alert_info_area* soap_new__ns22__alert_info_area(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info_area* soap_new_req__ns22__alert_info_area(soap*, ...) allocate, set required members
/// - _ns22__alert_info_area* soap_new_set__ns22__alert_info_area(soap*, ...) allocate, set all public members
/// - _ns22__alert_info_area::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info_area(soap*, _ns22__alert_info_area*) deserialize from a stream
/// - int soap_write__ns22__alert_info_area(soap*, _ns22__alert_info_area*) serialize to a stream
/// - _ns22__alert_info_area* _ns22__alert_info_area::soap_dup(soap*) returns deep copy of _ns22__alert_info_area, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info_area::soap_del() deep deletes _ns22__alert_info_area data members, use only after _ns22__alert_info_area::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info_area::soap_type() returns SOAP_TYPE__ns22__alert_info_area or derived type identifier
    class _ns22__alert_info_area
    { public:
/// Element "areaDesc" of type xs:string.
    std::string                          areaDesc                       1;	///< Required element.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > polygon                        0;	///< Multiple elements.
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > circle                         0;	///< Multiple elements.
/// Vector of geocode of length 0..unbounded.
    std::vector<
/// @note class _ns22__alert_info_area_geocode operations:
/// - _ns22__alert_info_area_geocode* soap_new__ns22__alert_info_area_geocode(soap*) allocate and default initialize
/// - _ns22__alert_info_area_geocode* soap_new__ns22__alert_info_area_geocode(soap*, int num) allocate and default initialize an array
/// - _ns22__alert_info_area_geocode* soap_new_req__ns22__alert_info_area_geocode(soap*, ...) allocate, set required members
/// - _ns22__alert_info_area_geocode* soap_new_set__ns22__alert_info_area_geocode(soap*, ...) allocate, set all public members
/// - _ns22__alert_info_area_geocode::soap_default(soap*) default initialize members
/// - int soap_read__ns22__alert_info_area_geocode(soap*, _ns22__alert_info_area_geocode*) deserialize from a stream
/// - int soap_write__ns22__alert_info_area_geocode(soap*, _ns22__alert_info_area_geocode*) serialize to a stream
/// - _ns22__alert_info_area_geocode* _ns22__alert_info_area_geocode::soap_dup(soap*) returns deep copy of _ns22__alert_info_area_geocode, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns22__alert_info_area_geocode::soap_del() deep deletes _ns22__alert_info_area_geocode data members, use only after _ns22__alert_info_area_geocode::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns22__alert_info_area_geocode::soap_type() returns SOAP_TYPE__ns22__alert_info_area_geocode or derived type identifier
    class _ns22__alert_info_area_geocode
    { public:
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":valueName.
    std::string                          valueName                      1;	///< Required element.
/// Element reference "urn:oasis:names:tc:emergency:cap:1.2:""urn:oasis:names:tc:emergency:cap:1.2":value.
    std::string                          value                          1;	///< Required element.
    }>                                   geocode                        0;	///< Multiple elements.
/// Element "altitude" of type xs:decimal.
    xsd__decimal*                        altitude                       0;	///< Optional element.
/// Element "ceiling" of type xs:decimal.
    xsd__decimal*                        ceiling                        0;	///< Optional element.
    }>                                   area                           0;	///< Multiple elements.
    }>                                   info                           0;	///< Multiple elements.
/// <any namespace="http://www.w3.org/2000/09/xmldsig#" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
    std::vector<_XML                   > __any                         0;	///< Store any element content in XML string.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://gov.fema.ipaws.services/IPAWS_CAPService/                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":postCAPRequestTypeDef
/// @brief "http://gov.fema.ipaws.services/IPAWS_CAPService/":postCAPRequestTypeDef is a complexType.
///
/// @note class _ns1__postCAPRequestTypeDef operations:
/// - _ns1__postCAPRequestTypeDef* soap_new__ns1__postCAPRequestTypeDef(soap*) allocate and default initialize
/// - _ns1__postCAPRequestTypeDef* soap_new__ns1__postCAPRequestTypeDef(soap*, int num) allocate and default initialize an array
/// - _ns1__postCAPRequestTypeDef* soap_new_req__ns1__postCAPRequestTypeDef(soap*, ...) allocate, set required members
/// - _ns1__postCAPRequestTypeDef* soap_new_set__ns1__postCAPRequestTypeDef(soap*, ...) allocate, set all public members
/// - _ns1__postCAPRequestTypeDef::soap_default(soap*) default initialize members
/// - int soap_read__ns1__postCAPRequestTypeDef(soap*, _ns1__postCAPRequestTypeDef*) deserialize from a stream
/// - int soap_write__ns1__postCAPRequestTypeDef(soap*, _ns1__postCAPRequestTypeDef*) serialize to a stream
/// - _ns1__postCAPRequestTypeDef* _ns1__postCAPRequestTypeDef::soap_dup(soap*) returns deep copy of _ns1__postCAPRequestTypeDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__postCAPRequestTypeDef::soap_del() deep deletes _ns1__postCAPRequestTypeDef data members, use only after _ns1__postCAPRequestTypeDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__postCAPRequestTypeDef::soap_type() returns SOAP_TYPE__ns1__postCAPRequestTypeDef or derived type identifier
class _ns1__postCAPRequestTypeDef
{ public:
/// <PRE><BLOCKQUOTE>
///   CAP Alert Message (version 1.2)
/// </BLOCKQUOTE></PRE>
///
/// Element reference "http://gov.fema.ipaws.services/IPAWS_CAPService/:""urn:oasis:names:tc:emergency:cap:1.2":alert.
    _ns22__alert*                        ns22__alert                    1;	///< Required element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException
/// @brief "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException is a complexType.
///
/// @note class _ns1__CAPServiceException operations:
/// - _ns1__CAPServiceException* soap_new__ns1__CAPServiceException(soap*) allocate and default initialize
/// - _ns1__CAPServiceException* soap_new__ns1__CAPServiceException(soap*, int num) allocate and default initialize an array
/// - _ns1__CAPServiceException* soap_new_req__ns1__CAPServiceException(soap*, ...) allocate, set required members
/// - _ns1__CAPServiceException* soap_new_set__ns1__CAPServiceException(soap*, ...) allocate, set all public members
/// - _ns1__CAPServiceException::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CAPServiceException(soap*, _ns1__CAPServiceException*) deserialize from a stream
/// - int soap_write__ns1__CAPServiceException(soap*, _ns1__CAPServiceException*) serialize to a stream
/// - _ns1__CAPServiceException* _ns1__CAPServiceException::soap_dup(soap*) returns deep copy of _ns1__CAPServiceException, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CAPServiceException::soap_del() deep deletes _ns1__CAPServiceException data members, use only after _ns1__CAPServiceException::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CAPServiceException::soap_type() returns SOAP_TYPE__ns1__CAPServiceException or derived type identifier
class _ns1__CAPServiceException
{ public:
/// Element "errorCode" of type xs:string.
    std::string*                         errorCode                      nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Element "message" of type xs:string.
    std::string*                         message                        nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":postCAPResponseTypeDef
/// @brief "http://gov.fema.ipaws.services/IPAWS_CAPService/":postCAPResponseTypeDef is a complexType.
///
/// @note class _ns1__postCAPResponseTypeDef operations:
/// - _ns1__postCAPResponseTypeDef* soap_new__ns1__postCAPResponseTypeDef(soap*) allocate and default initialize
/// - _ns1__postCAPResponseTypeDef* soap_new__ns1__postCAPResponseTypeDef(soap*, int num) allocate and default initialize an array
/// - _ns1__postCAPResponseTypeDef* soap_new_req__ns1__postCAPResponseTypeDef(soap*, ...) allocate, set required members
/// - _ns1__postCAPResponseTypeDef* soap_new_set__ns1__postCAPResponseTypeDef(soap*, ...) allocate, set all public members
/// - _ns1__postCAPResponseTypeDef::soap_default(soap*) default initialize members
/// - int soap_read__ns1__postCAPResponseTypeDef(soap*, _ns1__postCAPResponseTypeDef*) deserialize from a stream
/// - int soap_write__ns1__postCAPResponseTypeDef(soap*, _ns1__postCAPResponseTypeDef*) serialize to a stream
/// - _ns1__postCAPResponseTypeDef* _ns1__postCAPResponseTypeDef::soap_dup(soap*) returns deep copy of _ns1__postCAPResponseTypeDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__postCAPResponseTypeDef::soap_del() deep deletes _ns1__postCAPResponseTypeDef data members, use only after _ns1__postCAPResponseTypeDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__postCAPResponseTypeDef::soap_type() returns SOAP_TYPE__ns1__postCAPResponseTypeDef or derived type identifier
class _ns1__postCAPResponseTypeDef
{ public:
/// Element "postCAPReturn" of type xs:string.
    std::string*                         postCAPReturn                  nullptr 1;	///< Required nillable (xsi:nil when NULL) element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":messageResponseTypeDef
/// @brief "http://gov.fema.ipaws.services/IPAWS_CAPService/":messageResponseTypeDef is a complexType.
///
/// @note class _ns1__messageResponseTypeDef operations:
/// - _ns1__messageResponseTypeDef* soap_new__ns1__messageResponseTypeDef(soap*) allocate and default initialize
/// - _ns1__messageResponseTypeDef* soap_new__ns1__messageResponseTypeDef(soap*, int num) allocate and default initialize an array
/// - _ns1__messageResponseTypeDef* soap_new_req__ns1__messageResponseTypeDef(soap*, ...) allocate, set required members
/// - _ns1__messageResponseTypeDef* soap_new_set__ns1__messageResponseTypeDef(soap*, ...) allocate, set all public members
/// - _ns1__messageResponseTypeDef::soap_default(soap*) default initialize members
/// - int soap_read__ns1__messageResponseTypeDef(soap*, _ns1__messageResponseTypeDef*) deserialize from a stream
/// - int soap_write__ns1__messageResponseTypeDef(soap*, _ns1__messageResponseTypeDef*) serialize to a stream
/// - _ns1__messageResponseTypeDef* _ns1__messageResponseTypeDef::soap_dup(soap*) returns deep copy of _ns1__messageResponseTypeDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__messageResponseTypeDef::soap_del() deep deletes _ns1__messageResponseTypeDef data members, use only after _ns1__messageResponseTypeDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__messageResponseTypeDef::soap_type() returns SOAP_TYPE__ns1__messageResponseTypeDef or derived type identifier
class _ns1__messageResponseTypeDef
{ public:
/// <PRE><BLOCKQUOTE>
///   CAP Alert Message (version 1.2)
/// </BLOCKQUOTE></PRE>
///
/// Vector of _ns22__alert* element refs of length 0..unbounded.
    std::vector<_ns22__alert*          > ns22__alert                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPHeaderTypeDef
/// @brief "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPHeaderTypeDef is a complexType.
///
/// @note class _ns1__CAPHeaderTypeDef operations:
/// - _ns1__CAPHeaderTypeDef* soap_new__ns1__CAPHeaderTypeDef(soap*) allocate and default initialize
/// - _ns1__CAPHeaderTypeDef* soap_new__ns1__CAPHeaderTypeDef(soap*, int num) allocate and default initialize an array
/// - _ns1__CAPHeaderTypeDef* soap_new_req__ns1__CAPHeaderTypeDef(soap*, ...) allocate, set required members
/// - _ns1__CAPHeaderTypeDef* soap_new_set__ns1__CAPHeaderTypeDef(soap*, ...) allocate, set all public members
/// - _ns1__CAPHeaderTypeDef::soap_default(soap*) default initialize members
/// - int soap_read__ns1__CAPHeaderTypeDef(soap*, _ns1__CAPHeaderTypeDef*) deserialize from a stream
/// - int soap_write__ns1__CAPHeaderTypeDef(soap*, _ns1__CAPHeaderTypeDef*) serialize to a stream
/// - _ns1__CAPHeaderTypeDef* _ns1__CAPHeaderTypeDef::soap_dup(soap*) returns deep copy of _ns1__CAPHeaderTypeDef, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CAPHeaderTypeDef::soap_del() deep deletes _ns1__CAPHeaderTypeDef data members, use only after _ns1__CAPHeaderTypeDef::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int _ns1__CAPHeaderTypeDef::soap_type() returns SOAP_TYPE__ns1__CAPHeaderTypeDef or derived type identifier
class _ns1__CAPHeaderTypeDef
{ public:
/// Element "logonUser" of type xs:string.
    std::string*                         logonUser                      0;	///< Optional element.
/// Element "logonCogId" of type xs:int.
    int*                                 logonCogId                     0;	///< Optional element.
/// Pointer to soap context that manages this instance
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://gov.fema.ipaws.services/caprequest                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://gov.fema.ipaws.services/caprequest                                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://gov.fema.ipaws.services/capresponse                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://gov.fema.ipaws.services/capresponse                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":valueName of type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "urn:oasis:names:tc:emergency:cap:1.2":value of type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:oasis:names:tc:emergency:cap:1.2                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://gov.fema.ipaws.services/IPAWS_CAPService/                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":getRequestTypeDef of type "http://gov.fema.ipaws.services/caprequest":requestParameterList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":getResponseTypeDef of type "http://gov.fema.ipaws.services/capresponse":responseParameterList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://gov.fema.ipaws.services/IPAWS_CAPService/":getMessageTypeDef of type "http://gov.fema.ipaws.services/caprequest":requestParameterList.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://gov.fema.ipaws.services/IPAWS_CAPService/                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	CAPSoapHttp 
//gsoap ns1  service type:	CAPserviceInterface 
//gsoap ns1  service port:	http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS 
//gsoap ns1  service namespace:	http://gov.fema.ipaws.services/IPAWS_CAPService/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage IPAWS_USCORECAPService Definitions

@section IPAWS_USCORECAPService_bindings Service Bindings

  - @ref CAPSoapHttp

@section IPAWS_USCORECAPService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page CAPSoapHttp Binding "CAPSoapHttp"

@section CAPSoapHttp_operations Operations of Binding "CAPSoapHttp"

  - @ref __ns1__getRequest

  - @ref __ns1__postCAP

  - @ref __ns1__getMessage

@section CAPSoapHttp_ports Default endpoints of Binding "CAPSoapHttp"

  - http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Header                                                                *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Header is part of the gSOAP context and its content is accessed
through the soap.header variable. You may have to set the soap.actor variable
to serialize SOAP Headers with SOAP-ENV:actor or SOAP-ENV:role attributes.
Use option -j to remove entire SOAP Header definition.
Use option -k to remove the mustUnderstand qualifiers.

*/
mutable struct SOAP_ENV__Header
{
    mustUnderstand                       // must be understood by receiver
/// "request_Header" SOAP Header part element.
    _ns1__CAPHeaderTypeDef*              ns1__CAPHeaderTypeDef         ;

};


/******************************************************************************\
 *                                                                            *
 * SOAP Fault Detail                                                          *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Fault is part of the gSOAP context and its content is accessed
through the soap.fault->detail variable (SOAP 1.1) or the
soap.fault->SOAP_ENV__Detail variable (SOAP 1.2).
Use wsdl2h option -j to omit these declarations.

*/
mutable struct SOAP_ENV__Detail
{
/// xsd:anyAttribute omitted: to parse attribute content of the Detail element into DOM anyAttribute, use wsdl2h option -d.
/// SOAP Fault message "CAPSoapException" part "CAPSoapException" element ""http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException".
    _ns1__CAPServiceException*           ns1__CAPServiceException      ;
    int                                  __type                        ;	///< set to SOAP_TYPE_T for a serializable type T
    void                                *fault                         ;	///< points to serializable value of type T or NULL
    _XML                                 __any                         ;	///< Catch any other content in XML string.
};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   CAPSoapHttp                                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getRequest                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getRequest" of service binding "CAPSoapHttp".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS

  - Default SOAP action or REST location path:
    - "http://gov.fema.ipaws.services/IPAWS_CAPService/getRequest"

  - Addressing input action: "http://gov.fema.ipaws.services/IPAWS_CAPService/getRequest"

  - Addressing output action: "http://gov.fema.ipaws.services/IPAWS_CAPService/getRequestResponse"

  - Output Fault: "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException (literal)

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__CAPHeaderTypeDef

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getRequest(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__requestParameterList*          ns1__getRequestTypeDef,
    // output parameters:
    ns3__responseParameterList         &ns1__getResponseTypeDef
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getRequest(
    struct soap *soap,
    // input parameters:
    ns2__requestParameterList*          ns1__getRequestTypeDef,
    // output parameters:
    ns3__responseParameterList         &ns1__getResponseTypeDef
  );
@endcode

C++ proxy class (defined in soapCAPSoapHttpProxy.h generated with soapcpp2):
@code
  class CAPSoapHttpProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCAPSoapHttpService.h generated with soapcpp2):
@code
  class CAPSoapHttpService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getRequest SOAP
//gsoap ns1  service method-style:	getRequest document
//gsoap ns1  service method-encoding:	getRequest literal
//gsoap ns1  service method-input-action:	getRequest http://gov.fema.ipaws.services/IPAWS_CAPService/getRequest
//gsoap ns1  service method-output-action:	getRequest http://gov.fema.ipaws.services/IPAWS_CAPService/getRequestResponse
//gsoap ns1  service method-fault:	getRequest ns1__CAPServiceException
//gsoap ns1  service method-input-header-part:	getRequest ns1__CAPHeaderTypeDef
int __ns1__getRequest(
    ns2__requestParameterList*          ns1__getRequestTypeDef,	///< Input parameter
    ns3__responseParameterList         &ns1__getResponseTypeDef	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__postCAP                                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__postCAP" of service binding "CAPSoapHttp".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS

  - Default SOAP action or REST location path:
    - "http://gov.fema.ipaws.services/IPAWS_CAPService/postCAP"

  - Addressing input action: "http://gov.fema.ipaws.services/IPAWS_CAPService/postCAP"

  - Addressing output action: "http://gov.fema.ipaws.services/IPAWS_CAPService/postCAPResponse"

  - Output Fault: "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException (literal)

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__CAPHeaderTypeDef

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__postCAP(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__postCAPRequestTypeDef*        ns1__postCAPRequestTypeDef,
    // output parameters:
    _ns1__postCAPResponseTypeDef       &ns1__postCAPResponseTypeDef
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__postCAP(
    struct soap *soap,
    // input parameters:
    _ns1__postCAPRequestTypeDef*        ns1__postCAPRequestTypeDef,
    // output parameters:
    _ns1__postCAPResponseTypeDef       &ns1__postCAPResponseTypeDef
  );
@endcode

C++ proxy class (defined in soapCAPSoapHttpProxy.h generated with soapcpp2):
@code
  class CAPSoapHttpProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCAPSoapHttpService.h generated with soapcpp2):
@code
  class CAPSoapHttpService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	postCAP SOAP
//gsoap ns1  service method-style:	postCAP document
//gsoap ns1  service method-encoding:	postCAP literal
//gsoap ns1  service method-input-action:	postCAP http://gov.fema.ipaws.services/IPAWS_CAPService/postCAP
//gsoap ns1  service method-output-action:	postCAP http://gov.fema.ipaws.services/IPAWS_CAPService/postCAPResponse
//gsoap ns1  service method-fault:	postCAP ns1__CAPServiceException
//gsoap ns1  service method-input-header-part:	postCAP ns1__CAPHeaderTypeDef
int __ns1__postCAP(
    _ns1__postCAPRequestTypeDef*        ns1__postCAPRequestTypeDef,	///< Input parameter
    _ns1__postCAPResponseTypeDef       &ns1__postCAPResponseTypeDef	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMessage                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getMessage" of service binding "CAPSoapHttp".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS

  - Default SOAP action or REST location path:
    - "http://gov.fema.ipaws.services/IPAWS_CAPService/getMessage"

  - Addressing input action: "http://gov.fema.ipaws.services/IPAWS_CAPService/getMessage"

  - Addressing output action: "http://gov.fema.ipaws.services/IPAWS_CAPService/getMessageResponse"

  - Output Fault: "http://gov.fema.ipaws.services/IPAWS_CAPService/":CAPServiceException (literal)

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__CAPHeaderTypeDef

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMessage(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    ns2__requestParameterList*          ns1__getMessageTypeDef,
    // output parameters:
    _ns1__messageResponseTypeDef       &ns1__messageResponseTypeDef
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMessage(
    struct soap *soap,
    // input parameters:
    ns2__requestParameterList*          ns1__getMessageTypeDef,
    // output parameters:
    _ns1__messageResponseTypeDef       &ns1__messageResponseTypeDef
  );
@endcode

C++ proxy class (defined in soapCAPSoapHttpProxy.h generated with soapcpp2):
@code
  class CAPSoapHttpProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapCAPSoapHttpService.h generated with soapcpp2):
@code
  class CAPSoapHttpService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getMessage SOAP
//gsoap ns1  service method-style:	getMessage document
//gsoap ns1  service method-encoding:	getMessage literal
//gsoap ns1  service method-input-action:	getMessage http://gov.fema.ipaws.services/IPAWS_CAPService/getMessage
//gsoap ns1  service method-output-action:	getMessage http://gov.fema.ipaws.services/IPAWS_CAPService/getMessageResponse
//gsoap ns1  service method-fault:	getMessage ns1__CAPServiceException
//gsoap ns1  service method-input-header-part:	getMessage ns1__CAPHeaderTypeDef
int __ns1__getMessage(
    ns2__requestParameterList*          ns1__getMessageTypeDef,	///< Input parameter
    _ns1__messageResponseTypeDef       &ns1__messageResponseTypeDef	///< Output parameter
);

/**

@page CAPSoapHttp Binding "CAPSoapHttp"

@section CAPSoapHttp_policy_enablers Policy Enablers of Binding "CAPSoapHttp"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDL and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns2 Top-level root elements of schema "http://gov.fema.ipaws.services/caprequest"

@section ns3 Top-level root elements of schema "http://gov.fema.ipaws.services/capresponse"

  - <ns3:parameterListItem> @ref _ns3__parameterListItem
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns3__parameterListItem(struct soap*, _ns3__parameterListItem*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns3__parameterListItem(struct soap*, _ns3__parameterListItem*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns3__parameterListItem(struct soap*, const char *URL, _ns3__parameterListItem*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns3__parameterListItem(struct soap*, const char *URL, _ns3__parameterListItem*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns3__parameterListItem(struct soap*, const char *URL, _ns3__parameterListItem*);
    soap_POST_recv__ns3__parameterListItem(struct soap*, _ns3__parameterListItem*);
    @endcode

@section ns22 Top-level root elements of schema "urn:oasis:names:tc:emergency:cap:1.2"

  - <ns22:alert> @ref _ns22__alert
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns22__alert(struct soap*, _ns22__alert*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns22__alert(struct soap*, _ns22__alert*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns22__alert(struct soap*, const char *URL, _ns22__alert*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns22__alert(struct soap*, const char *URL, _ns22__alert*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns22__alert(struct soap*, const char *URL, _ns22__alert*);
    soap_POST_recv__ns22__alert(struct soap*, _ns22__alert*);
    @endcode

  - <ns22:valueName> (use wsdl2h option -g to auto-generate type _ns22__valueName)

  - <ns22:value> (use wsdl2h option -g to auto-generate type _ns22__value)

@section ns1 Top-level root elements of schema "http://gov.fema.ipaws.services/IPAWS_CAPService/"

  - <ns1:getRequestTypeDef> (use wsdl2h option -g to auto-generate type _ns1__getRequestTypeDef)

  - <ns1:getResponseTypeDef> (use wsdl2h option -g to auto-generate type _ns1__getResponseTypeDef)

  - <ns1:getMessageTypeDef> (use wsdl2h option -g to auto-generate type _ns1__getMessageTypeDef)

  - <ns1:postCAPRequestTypeDef> @ref _ns1__postCAPRequestTypeDef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__postCAPRequestTypeDef(struct soap*, const char *URL, _ns1__postCAPRequestTypeDef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__postCAPRequestTypeDef(struct soap*, const char *URL, _ns1__postCAPRequestTypeDef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__postCAPRequestTypeDef(struct soap*, const char *URL, _ns1__postCAPRequestTypeDef*);
    soap_POST_recv__ns1__postCAPRequestTypeDef(struct soap*, _ns1__postCAPRequestTypeDef*);
    @endcode

  - <ns1:CAPServiceException> @ref _ns1__CAPServiceException
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CAPServiceException(struct soap*, const char *URL, _ns1__CAPServiceException*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CAPServiceException(struct soap*, const char *URL, _ns1__CAPServiceException*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CAPServiceException(struct soap*, const char *URL, _ns1__CAPServiceException*);
    soap_POST_recv__ns1__CAPServiceException(struct soap*, _ns1__CAPServiceException*);
    @endcode

  - <ns1:postCAPResponseTypeDef> @ref _ns1__postCAPResponseTypeDef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__postCAPResponseTypeDef(struct soap*, _ns1__postCAPResponseTypeDef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__postCAPResponseTypeDef(struct soap*, _ns1__postCAPResponseTypeDef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__postCAPResponseTypeDef(struct soap*, const char *URL, _ns1__postCAPResponseTypeDef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__postCAPResponseTypeDef(struct soap*, const char *URL, _ns1__postCAPResponseTypeDef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__postCAPResponseTypeDef(struct soap*, const char *URL, _ns1__postCAPResponseTypeDef*);
    soap_POST_recv__ns1__postCAPResponseTypeDef(struct soap*, _ns1__postCAPResponseTypeDef*);
    @endcode

  - <ns1:messageResponseTypeDef> @ref _ns1__messageResponseTypeDef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__messageResponseTypeDef(struct soap*, _ns1__messageResponseTypeDef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__messageResponseTypeDef(struct soap*, _ns1__messageResponseTypeDef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__messageResponseTypeDef(struct soap*, const char *URL, _ns1__messageResponseTypeDef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__messageResponseTypeDef(struct soap*, const char *URL, _ns1__messageResponseTypeDef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__messageResponseTypeDef(struct soap*, const char *URL, _ns1__messageResponseTypeDef*);
    soap_POST_recv__ns1__messageResponseTypeDef(struct soap*, _ns1__messageResponseTypeDef*);
    @endcode

  - <ns1:CAPHeaderTypeDef> @ref _ns1__CAPHeaderTypeDef
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__CAPHeaderTypeDef(struct soap*, const char *URL, _ns1__CAPHeaderTypeDef*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__CAPHeaderTypeDef(struct soap*, const char *URL, _ns1__CAPHeaderTypeDef*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__CAPHeaderTypeDef(struct soap*, const char *URL, _ns1__CAPHeaderTypeDef*);
    soap_POST_recv__ns1__CAPHeaderTypeDef(struct soap*, _ns1__CAPHeaderTypeDef*);
    @endcode

*/

/* End of cap.h */
