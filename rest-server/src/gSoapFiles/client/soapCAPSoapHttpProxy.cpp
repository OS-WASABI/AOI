/* soapCAPSoapHttpProxy.cpp
   Generated by gSOAP 2.8.75 for ipaws.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapCAPSoapHttpProxy.h"

CAPSoapHttpProxy::CAPSoapHttpProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	CAPSoapHttpProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CAPSoapHttpProxy::CAPSoapHttpProxy(const CAPSoapHttpProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

CAPSoapHttpProxy::CAPSoapHttpProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	CAPSoapHttpProxy_init(_soap->imode, _soap->omode);
}

CAPSoapHttpProxy::CAPSoapHttpProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	CAPSoapHttpProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

CAPSoapHttpProxy::CAPSoapHttpProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	CAPSoapHttpProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

CAPSoapHttpProxy::CAPSoapHttpProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	CAPSoapHttpProxy_init(iomode, iomode);
}

CAPSoapHttpProxy::CAPSoapHttpProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	CAPSoapHttpProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

CAPSoapHttpProxy::CAPSoapHttpProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	CAPSoapHttpProxy_init(imode, omode);
}

CAPSoapHttpProxy::~CAPSoapHttpProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void CAPSoapHttpProxy::CAPSoapHttpProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns2", "http://gov.fema.ipaws.services/caprequest", NULL, NULL },
        { "ns3", "http://gov.fema.ipaws.services/capresponse", NULL, NULL },
        { "ns4", "urn:oasis:names:tc:emergency:cap:1.2", NULL, NULL },
        { "ns1", "http://gov.fema.ipaws.services/IPAWS_CAPService/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

CAPSoapHttpProxy *CAPSoapHttpProxy::copy()
{	CAPSoapHttpProxy *dup = SOAP_NEW_UNMANAGED(CAPSoapHttpProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}

CAPSoapHttpProxy& CAPSoapHttpProxy::operator=(const CAPSoapHttpProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void CAPSoapHttpProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void CAPSoapHttpProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	CAPSoapHttpProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void CAPSoapHttpProxy::soap_noheader()
{	this->soap->header = NULL;
}

void CAPSoapHttpProxy::soap_header(_ns1__CAPHeaderTypeDef *ns1__CAPHeaderTypeDef)
{
	::soap_header(this->soap);
	this->soap->header->ns1__CAPHeaderTypeDef = ns1__CAPHeaderTypeDef;
}

::SOAP_ENV__Header *CAPSoapHttpProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *CAPSoapHttpProxy::soap_fault()
{	return this->soap->fault;
}

const char *CAPSoapHttpProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *CAPSoapHttpProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *CAPSoapHttpProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int CAPSoapHttpProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int CAPSoapHttpProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void CAPSoapHttpProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void CAPSoapHttpProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *CAPSoapHttpProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int CAPSoapHttpProxy::send_getRequest(const char *soap_endpoint_url, const char *soap_action, ns2__requestParameterList *ns1__getRequestTypeDef)
{
	struct __ns1__getRequest soap_tmp___ns1__getRequest;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS";
	if (soap_action == NULL)
		soap_action = "http://gov.fema.ipaws.services/IPAWS_CAPService/getRequest";
	soap_tmp___ns1__getRequest.ns1__getRequestTypeDef = ns1__getRequestTypeDef;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__getRequest(soap, &soap_tmp___ns1__getRequest);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getRequest(soap, &soap_tmp___ns1__getRequest, "-ns1:getRequest", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getRequest(soap, &soap_tmp___ns1__getRequest, "-ns1:getRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int CAPSoapHttpProxy::recv_getRequest(ns3__responseParameterList &ns1__getResponseTypeDef)
{
	ns1__getResponseTypeDef.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__getResponseTypeDef.soap_get(soap, "ns1:getResponseTypeDef", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAPSoapHttpProxy::send_postCAP(const char *soap_endpoint_url, const char *soap_action, _ns1__postCAPRequestTypeDef *ns1__postCAPRequestTypeDef)
{
	struct __ns1__postCAP soap_tmp___ns1__postCAP;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS";
	if (soap_action == NULL)
		soap_action = "http://gov.fema.ipaws.services/IPAWS_CAPService/postCAP";
	soap_tmp___ns1__postCAP.ns1__postCAPRequestTypeDef = ns1__postCAPRequestTypeDef;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__postCAP(soap, &soap_tmp___ns1__postCAP);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__postCAP(soap, &soap_tmp___ns1__postCAP, "-ns1:postCAP", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__postCAP(soap, &soap_tmp___ns1__postCAP, "-ns1:postCAP", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int CAPSoapHttpProxy::recv_postCAP(_ns1__postCAPResponseTypeDef &ns1__postCAPResponseTypeDef)
{
	ns1__postCAPResponseTypeDef.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__postCAPResponseTypeDef.soap_get(soap, "ns1:postCAPResponseTypeDef", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int CAPSoapHttpProxy::send_getMessage(const char *soap_endpoint_url, const char *soap_action, ns2__requestParameterList *ns1__getMessageTypeDef)
{
	struct __ns1__getMessage soap_tmp___ns1__getMessage;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://vvsoua7.fematdl.net:8210/IPAWS_CAPService/IPAWS";
	if (soap_action == NULL)
		soap_action = "http://gov.fema.ipaws.services/IPAWS_CAPService/getMessage";
	soap_tmp___ns1__getMessage.ns1__getMessageTypeDef = ns1__getMessageTypeDef;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__getMessage(soap, &soap_tmp___ns1__getMessage);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__getMessage(soap, &soap_tmp___ns1__getMessage, "-ns1:getMessage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__getMessage(soap, &soap_tmp___ns1__getMessage, "-ns1:getMessage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int CAPSoapHttpProxy::recv_getMessage(_ns1__messageResponseTypeDef &ns1__messageResponseTypeDef)
{
	ns1__messageResponseTypeDef.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__messageResponseTypeDef.soap_get(soap, "ns1:messageResponseTypeDef", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
